name: 'Manual Inferno Deployment to K8'
# can merge this with k8-deploy.yaml and use if condition to check if it is a manual trigger but for now keeping it separate

on:
  workflow_dispatch: # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write # This is required for posting the comment

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    env:
      working-dir: "./infra/aws-impl"
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials
    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::471112546300:role/core-inferno-github-actions-eks-role
        aws-region: ap-southeast-2

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init -upgrade \
          -backend-config="bucket=examplebucket-fhir-aws" \
          -backend-config="region=ap-southeast-2" \
          -backend-config="key=infra/inferno/au-fhir-inferno-${{ github.event.inputs.packages }}.tfstate"
      working-directory: ${{ env.working-dir }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ env.working-dir }}

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      working-directory: ${{ env.working-dir }}
      run: |
        export exitcode=0
        terraform plan -var-file="tfvars/${{ github.event.inputs.packages }}.tfvars" -detailed-exitcode -no-color -out main.tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ env.working-dir }}/main.tfplan

  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    env:
      working-dir: "./infra/aws-impl"
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials
    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::471112546300:role/inferno-github-actions-eks-role
        aws-region: ap-southeast-2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init -upgrade \
          -backend-config="bucket=examplebucket-fhir-aws" \
          -backend-config="region=ap-southeast-2" \
          -backend-config="key=infra/inferno/au-fhir-inferno-${{ github.event.inputs.packages }}.tfstate"
      working-directory: ${{ env.working-dir }}

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ${{ env.working-dir }}

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve main.tfplan
      working-directory: ${{ env.working-dir }}