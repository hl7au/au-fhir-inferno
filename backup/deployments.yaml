apiVersion: apps/v1
kind: Deployment
metadata:
  name: inferno-worker
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inferno-worker
  template:
    metadata:
      labels:
        app: inferno-worker
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
      - name: inferno-worker
        image: {{ .Values.inferno.imageUrl }}
        command: ["bundle", "exec", "sidekiq", "-r", "./worker.rb"]
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: inferno
        - configMapRef:
            name: postgresql-configmap
        - secretRef:
            name: postgresql-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inferno-app
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inferno-app
  template:
    metadata:
      labels:
        app: inferno-app
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      initContainers:
      - name: generate-static-files
        image: {{ .Values.inferno.imageUrl }}
        command: ["bundle", "exec", "rake", "web:generate"]
        env:
          - name: TX_SERVER_URL
            value: {{ .Values.inferno.terminologyServer }}
      - name: run-migrations
        image: {{ .Values.inferno.imageUrl }}
        imagePullPolicy: Always
        command: ["bundle", "exec", "rake", "db:migrate"]
        env:
          - name: TX_SERVER_URL
            value: {{ .Values.inferno.terminologyServer }}
        envFrom:
        - configMapRef:
            name: inferno
        - configMapRef:
            name: postgresql-configmap
        - secretRef:
            name: postgresql-secret
      containers:
      - name: inferno-app
        image: {{ .Values.inferno.imageUrl }}
        imagePullPolicy: Always
        ports:
          - containerPort: 4567
        env:
          - name: TX_SERVER_URL
            value: {{ .Values.inferno.terminologyServer }}
        envFrom:
        - configMapRef:
            name: inferno
        - configMapRef:
            name: postgresql-configmap
        - secretRef:
            name: postgresql-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inferno-redis
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inferno-redis
  template:
    metadata:
      labels:
        app: inferno-redis
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
      - name: redis
        image: redis:7.0.5-bullseye
        imagePullPolicy: Always
        ports:
          - containerPort: 6379
        env:
          - name: MASTER
            value: "true"
        volumeMounts:
          - mountPath: "/data"
            name: redis-data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: validator-api
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: validator-api
  template:
    metadata:
      labels:
        app: validator-api
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      volumes:
      - name: igs
        emptyDir:
          sizeLimit: "10M"
      initContainers:
      - name: copy-ig
        image: {{ .Values.inferno.imageUrl }}
        imagePullPolicy: Always
        command: ["bash", "-c", "cp /opt/inferno/lib/inferno_platform_template/igs/*.tgz /home/igs"] # for dev/non core image
        # command: ["bash", "-c", "cp /opt/inferno/lib/au_core_test_kit/igs/*.tgz /home/igs"] #for prod / core image
        volumeMounts:
        - name: igs
          mountPath: /home/igs
      containers:
      - name: validator-api
        image: pavelrozhkov/wrapper:6.3.11
        imagePullPolicy: Always
        ports:
        - containerPort: 3500
        volumeMounts:
        - name: igs
          mountPath: /home/igs
          readOnly: true
